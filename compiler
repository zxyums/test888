import React, { useState, useEffect, useRef } from "react";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import "ag-grid-enterprise"; // Required for Enterprise features

const PivotAGGrid = () => {
  const gridRef = useRef();

  const [columnDefs, setColumnDefs] = useState([]);
  const [rowData, setRowData] = useState([]);

  useEffect(() => {
    // Step 1: Define Data (Row-Based)
    const data = [
      { field: "Age", name: "John", value: 28 },
      { field: "Age", name: "Alice", value: 25 },
      { field: "City", name: "John", value: "New York" },
      { field: "City", name: "Alice", value: "Los Angeles" }
    ];

    // Step 2: Define Columns (Pivot Mode & Aggregation)
    const columns = [
      { field: "field", rowGroup: true, headerName: "Field" }, // Ensures Age & City appear as rows
      { field: "name", pivot: true, headerName: "Person" }, // Pivot "Name" into columns
      { field: "value", headerName: "Value", aggFunc: customAggFunc, enableValue: true }
    ];

    setRowData(data);
    setColumnDefs(columns);
  }, []);

  // Step 3: Custom Aggregation Function to Handle Mixed Data Types
  const customAggFunc = (params) => {
    // If the value is a number, return the first number
    if (params.values.every(val => typeof val === "number")) {
      return params.values[0]; // Works fine for Age
    }
    // If the value is a string, return the first string
    if (params.values.every(val => typeof val === "string")) {
      return params.values[0]; // Works fine for City
    }
    return null; // Fallback in case of unexpected data
  };

  return (
    <div style={{ display: "flex", flexDirection: "column", height: "100vh" }}>
      <div className="ag-theme-alpine" style={{ flexGrow: 1, width: "100%" }}>
        <AgGridReact
          ref={gridRef}
          rowData={rowData}
          columnDefs={columnDefs}
          pivotMode={true} // Enables Pivot Mode
          defaultColDef={{ flex: 1, sortable: true, filter: true, resizable: true }}
          sideBar={true} // Enables Sidebar for Pivot Selection
          groupDisplayType="groupRows" // Ensures proper row grouping
        />
      </div>
    </div>
  );
};

export default PivotAGGrid;